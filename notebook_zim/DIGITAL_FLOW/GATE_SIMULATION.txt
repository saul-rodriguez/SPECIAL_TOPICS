Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-04-08T18:32:36+02:00

====== GATE SIMULATION ======
Created onsdag 08 april 2020

====== 1) Setup working directory ======

The same as in [[RTL SIMULATION.]]  Recommended name for working directory: sim_gate

====== 2) Script to load libaries/verilog code, elaborate, and simulate: ======


The make.sh script is almost the same is in [[RTL SIMULATION]] but now the verilog file that is loaded is the one that was generated by genus:

#make.sh

//rm -rf work*/* work*/.* *.log .simvision *.dsn *.trn *.vcd wave* *.X//

xmvlog -work work_lib -cdslib ./cds.lib -logfile xmvlog_presyn.log \
	-errormax 15 -update -linedebug -status -define DISPLAY_PD_PU_EN \
	/pkg/xfab/XKIT/xh018/diglibs/D_CELLS_HD/v3_0/verilog/v3_0_0/D_CELLS_HD.v \
	/pkg/xfab/XKIT/xh018/diglibs/D_CELLS_HD/v3_0/verilog/v3_0_0/VLG_PRIMITIVES.v

# load synthesized netlist
xmvlog -work work_sub -cdslib ./cds.lib -append_log \
	-logfile xmvlog_presyn.log -errormax 15 -update -linedebug \
	-status ../genus/genus_output/usart_synth.v 

xmvlog -work work -cdslib ./cds.lib -append_log \
	-logfile xmvlog_presyn.log -errormax 15 -update -linedebug \
	-define postsyn -status ./usart_rx_bamse_tb.v

xmelab -work work -cdslib ./cds.lib -timescale '1ns/10ps' \
	-logfile xmelab_presyn.log -errormax 30 -access +wc \
	-nowarn CUVWSP -nowarn SDFNCAP -status work.usart_rx_bamse_tb

xmsim -cdslib ./cds.lib \
	-logfile xmsim_presyn.log -errormax 15 -status [[work.usart_rx_bamse_tb:module]]


**Note1:** the synthethized netlist is loaded from the output directory of genus

**Note2:** there is a -define postsyn which adds a `define postsyn to the test bench. These defines are useful to activate/deactivate different parts of the code depending on the desired simulation.  

**Note3:** Now that the design is at gate level it is necessary to exercise a lot of care that the test bench signals and clock do not cause undesided states. The typical problems are the following:

- __Timing violation in synchonizers __due to asynchonous test signals being created aligned with the test clock. This works fine in RTL, but at gate level the hold and setup timings in the synchonizer's flipflops will result in unknown states which propagate inside the core once sampled by the clock. A simple solution is just to delay the asynchonous signal, i.e.:

reg rx;

always @(o_TX_Serial)
	rx = #2 o_TX_Serial;
 
- Input signals with u__nknown state __ will propagate into the core when sampled and may cause the system enter in un undetermined state. This is more common at the beginning of the simulation when reset is released before some input signals have taken 1 or 0 values. The reset should be released only when these signals have a well defined state 1 or 0.

